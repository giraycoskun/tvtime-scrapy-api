{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#tvtime-scrapy-api","title":"TVTime Scrapy API","text":"<p>It is a REST API that uses the Scrapy framework to work as unofficial TVTime API.</p> <p>Docs: https://giraycoskun.github.io/tvtime-scrapy-api/</p> <p>Reference: https://giraycoskun.github.io/tvtime-scrapy-api/reference/index/</p> <p>Swagger UI: https://giraycoskun.github.io/tvtime-scrapy-api/openapi/</p>"},{"location":"#security","title":"Security","text":"<p>As TvTime does not have an OAUTH Code Grant Flow, it is not possible to use the API with a token and thus it requires TVTime username and password. Therefore it is not up-to security standards and it cannot promise that without the oauth2.0 scheme.</p> <p>However it only uses username and password to scrape data and does not store the password.</p>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#docker","title":"Docker","text":"<pre><code>docker pull redis/redis-stack\n</code></pre>"},{"location":"#local-development","title":"Local Development","text":"<pre><code>poetry export -f requirements.txt --output requirements.txt --with docs,dev,test\n</code></pre> <pre><code>uvicorn src.main:app --reload\n</code></pre> <pre><code>pytest -o log_cli=true -o log_cli_level=DEBUG \n</code></pre> <pre><code>coverage run --source src -m pytest\n</code></pre> <pre><code>celery -A src.repository.celery_repository worker --concurrency 2 --loglevel=DEBUG\n</code></pre>"},{"location":"#todo","title":"TODO","text":"<ul> <li> Add tests to cover data services &amp; celery</li> <li> Add user authentication</li> <li> Add exception handling from scrapy</li> <li> Add exception handling from redis</li> </ul>"},{"location":"#reference","title":"Reference","text":"<p>FASTAPI: https://fastapi.tiangolo.com/</p> <p>REDIS: https://redis.io/</p> <p>CELERY: https://docs.celeryproject.org/en/stable/</p> <p>SCRAPY: https://docs.scrapy.org/en/latest/</p> <p> </p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#usage","title":"Usage","text":""},{"location":"getting-started/#development","title":"Development","text":""},{"location":"getting-started/#project-strucuture","title":"Project Strucuture","text":"<pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 repository\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 celery_repository.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 models.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 redis_repository.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 spider.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 routes\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 scraper.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tvtime.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 user.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 service\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 tvtime_data.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 tvtime_scraper.py\n\u2502\u00a0\u00a0\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 assets\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 data.json\n    \u251c\u2500\u2500 test_app.py\n    \u2514\u2500\u2500 test_spider.py\n</code></pre>"},{"location":"getting-started/#architecture-api","title":"Architecture &amp; API","text":""},{"location":"openapi/","title":"OpenAPI Swagger UI","text":""},{"location":"system/","title":"System Reference","text":""},{"location":"system/#redis","title":"Redis","text":"<p>Redis-Om Python Docs:</p> <ul> <li> <p>https://github.com/redis/redis-om-python/blob/main/docs/index.md</p> </li> <li> <p>https://hub.docker.com/r/redislabs/redismod</p> </li> <li> <p>https://redis.io/docs/stack/get-started/tutorials/stack-python/</p> </li> </ul>"},{"location":"system/#scrapy","title":"Scrapy","text":""},{"location":"system/#celery","title":"Celery","text":""},{"location":"system/#postgresql","title":"PostgreSQL","text":"<ul> <li>https://www.postgresql.org/</li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li> Routes</li> <li> Service</li> <li> Repository</li> <li> Spider</li> </ul>"},{"location":"reference/repository/","title":"Repository","text":""},{"location":"reference/repository/#models","title":"Models","text":""},{"location":"reference/repository/#models.api","title":"<code>models.api</code>","text":""},{"location":"reference/repository/#models.api.Episode","title":"<code>Episode</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>src/models/api.py</code> <pre><code>class Episode(BaseModel):\n    episode_id: int\n</code></pre>"},{"location":"reference/repository/#models.api.Episode.episode_id","title":"<code>episode_id: int</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.Season","title":"<code>Season</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>src/models/api.py</code> <pre><code>class Season(BaseModel):\n    season: int\n    show: Show\n</code></pre>"},{"location":"reference/repository/#models.api.Season.season","title":"<code>season: int</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.Season.show","title":"<code>show: Show</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.Show","title":"<code>Show</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>src/models/api.py</code> <pre><code>class Show(BaseModel):\n    show_id: int\n</code></pre>"},{"location":"reference/repository/#models.api.Show.show_id","title":"<code>show_id: int</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.TVTimeUser","title":"<code>TVTimeUser</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>src/models/api.py</code> <pre><code>class TVTimeUser(BaseModel):\n    username: str\n    password: str\n</code></pre>"},{"location":"reference/repository/#models.api.TVTimeUser.password","title":"<code>password: str</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.TVTimeUser.username","title":"<code>username: str</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.UserDB","title":"<code>UserDB</code>","text":"<p>         Bases: <code>UserOut</code></p> Source code in <code>src/models/api.py</code> <pre><code>class UserDB(UserOut):\n    hashed_password: str\n</code></pre>"},{"location":"reference/repository/#models.api.UserDB.hashed_password","title":"<code>hashed_password: str</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.UserIn","title":"<code>UserIn</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>src/models/api.py</code> <pre><code>class UserIn(BaseModel):\n    username: str\n    password: str\n</code></pre>"},{"location":"reference/repository/#models.api.UserIn.password","title":"<code>password: str</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.UserIn.username","title":"<code>username: str</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.UserOut","title":"<code>UserOut</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>src/models/api.py</code> <pre><code>class UserOut(BaseModel):\n    user_id: UUID\n    username: str\n    tv_time_username: str\n    disabled: bool | None = None\n</code></pre>"},{"location":"reference/repository/#models.api.UserOut.disabled","title":"<code>disabled: bool | None = None</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.UserOut.tv_time_username","title":"<code>tv_time_username: str</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.UserOut.user_id","title":"<code>user_id: UUID</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.api.UserOut.username","title":"<code>username: str</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.data","title":"<code>models.data</code>","text":""},{"location":"reference/repository/#models.data.TVTimeDataModel","title":"<code>TVTimeDataModel</code>","text":"<p>         Bases: <code>JsonModel</code></p> Source code in <code>src/models/data.py</code> <pre><code>class TVTimeDataModel(JsonModel):\n    username: str = Field(index=True, primary_key=True)\n    user_id: Optional[str]\n    to_watch: Optional[dict]\n    upcoming: Optional[dict]\n    profile: Optional[dict]\n\n    class Meta:  # pylint: disable=missing-class-docstring\n        global_key_prefix = \"tvtime\"\n        model_key_prefix = \"data\"\n</code></pre>"},{"location":"reference/repository/#models.data.TVTimeDataModel.profile","title":"<code>profile: Optional[dict]</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.data.TVTimeDataModel.to_watch","title":"<code>to_watch: Optional[dict]</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.data.TVTimeDataModel.upcoming","title":"<code>upcoming: Optional[dict]</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.data.TVTimeDataModel.user_id","title":"<code>user_id: Optional[str]</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.data.TVTimeDataModel.username","title":"<code>username: str = Field(index=True, primary_key=True)</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.data.TVTimeDataModel.Meta","title":"<code>Meta</code>","text":"Source code in <code>src/models/data.py</code> <pre><code>class Meta:  # pylint: disable=missing-class-docstring\n    global_key_prefix = \"tvtime\"\n    model_key_prefix = \"data\"\n</code></pre>"},{"location":"reference/repository/#models.data.TVTimeDataModel.Meta.global_key_prefix","title":"<code>global_key_prefix = 'tvtime'</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#models.data.TVTimeDataModel.Meta.model_key_prefix","title":"<code>model_key_prefix = 'data'</code>  <code>class-attribute</code>","text":""},{"location":"reference/repository/#redis","title":"Redis","text":""},{"location":"reference/repository/#repository.redis_repository","title":"<code>repository.redis_repository</code>","text":""},{"location":"reference/repository/#repository.redis_repository.RedisOMClient","title":"<code>RedisOMClient</code>","text":"Source code in <code>src/repository/redis_repository.py</code> <pre><code>class RedisOMClient:\n    def __init__(self) -&gt; None:\n        self.redis = get_redis_connection(url=REDIS_URL)\n        TVTimeDataModel.Meta.database = self.redis\n        # try:\n        #     Migrator().run()\n        # except MigrationError as e:\n        #     logger.error(e)\n\n    def exists(self, key):\n        key = f\"tvtime:data:{key}\"\n        return self.redis.exists(key)\n\n    def get_ttl(self, key):\n        key = f\"tvtime:data:{key}\"\n        return self.redis.ttl(key)\n\n    def get_tvtime_data(self, key):\n        user = TVTimeDataModel.get(key)\n        return user\n\n    def get_tvtime_watch_next(self, key):\n        data = TVTimeDataModel.get(key)\n        if \"Watch next\" in data.to_watch:\n            return data.to_watch[\"Watch next\"]\n        else:\n            return {}\n\n    def get_tvtime_not_watched_for_while(self, key):\n        data = TVTimeDataModel.get(key)\n        if \"Not watched for a while\" in data.to_watch:\n            return data.to_watch[\"Not watched for a while\"]\n        else:\n            return {}\n\n    def get_tvtime_not_started_yet(self, key):\n        data = TVTimeDataModel.get(key)\n        if \"Not started yet\" in data.to_watch:\n            return data.to_watch[\"Not started yet\"]\n        else:\n            return {}\n</code></pre>"},{"location":"reference/repository/#repository.redis_repository.RedisOMClient.redis","title":"<code>redis = get_redis_connection(url=REDIS_URL)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/repository/#repository.redis_repository.RedisOMClient.__init__","title":"<code>__init__()</code>","text":"Source code in <code>src/repository/redis_repository.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.redis = get_redis_connection(url=REDIS_URL)\n    TVTimeDataModel.Meta.database = self.redis\n</code></pre>"},{"location":"reference/repository/#repository.redis_repository.RedisOMClient.exists","title":"<code>exists(key)</code>","text":"Source code in <code>src/repository/redis_repository.py</code> <pre><code>def exists(self, key):\n    key = f\"tvtime:data:{key}\"\n    return self.redis.exists(key)\n</code></pre>"},{"location":"reference/repository/#repository.redis_repository.RedisOMClient.get_ttl","title":"<code>get_ttl(key)</code>","text":"Source code in <code>src/repository/redis_repository.py</code> <pre><code>def get_ttl(self, key):\n    key = f\"tvtime:data:{key}\"\n    return self.redis.ttl(key)\n</code></pre>"},{"location":"reference/repository/#repository.redis_repository.RedisOMClient.get_tvtime_data","title":"<code>get_tvtime_data(key)</code>","text":"Source code in <code>src/repository/redis_repository.py</code> <pre><code>def get_tvtime_data(self, key):\n    user = TVTimeDataModel.get(key)\n    return user\n</code></pre>"},{"location":"reference/repository/#repository.redis_repository.RedisOMClient.get_tvtime_not_started_yet","title":"<code>get_tvtime_not_started_yet(key)</code>","text":"Source code in <code>src/repository/redis_repository.py</code> <pre><code>def get_tvtime_not_started_yet(self, key):\n    data = TVTimeDataModel.get(key)\n    if \"Not started yet\" in data.to_watch:\n        return data.to_watch[\"Not started yet\"]\n    else:\n        return {}\n</code></pre>"},{"location":"reference/repository/#repository.redis_repository.RedisOMClient.get_tvtime_not_watched_for_while","title":"<code>get_tvtime_not_watched_for_while(key)</code>","text":"Source code in <code>src/repository/redis_repository.py</code> <pre><code>def get_tvtime_not_watched_for_while(self, key):\n    data = TVTimeDataModel.get(key)\n    if \"Not watched for a while\" in data.to_watch:\n        return data.to_watch[\"Not watched for a while\"]\n    else:\n        return {}\n</code></pre>"},{"location":"reference/repository/#repository.redis_repository.RedisOMClient.get_tvtime_watch_next","title":"<code>get_tvtime_watch_next(key)</code>","text":"Source code in <code>src/repository/redis_repository.py</code> <pre><code>def get_tvtime_watch_next(self, key):\n    data = TVTimeDataModel.get(key)\n    if \"Watch next\" in data.to_watch:\n        return data.to_watch[\"Watch next\"]\n    else:\n        return {}\n</code></pre>"},{"location":"reference/repository/#celery","title":"Celery","text":""},{"location":"reference/repository/#repository.celery_repository","title":"<code>repository.celery_repository</code>","text":""},{"location":"reference/repository/#repository.celery_repository.celery","title":"<code>celery = Celery(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/repository/#repository.celery_repository.scrape_task","title":"<code>scrape_task(user)</code>","text":"Source code in <code>src/repository/celery_repository.py</code> <pre><code>@celery.task(name=\"scrape_task\")\ndef scrape_task(user: TVTimeUser):\n    logger.info(\"Scraping Task Started\")\n    logger.debug(f\"User: {user}\")\n    logger.debug(f\"User: {user.username}\")\n    spider_process = CrawlerProcess(\n        settings={\n            \"ITEM_PIPELINES\": {\n                \"src.repository.spider.RedisWriterPipeline\": 1,\n            }\n        }\n    )\n    input_args = {\"user\": user}\n    spider_process.crawl(TVTimeSpider, **input_args)\n    spider_process.start()\n    try:\n        TVTimeDataModel.get(user.username)\n    except NotFoundError as exc:\n        raise Exception(\"User not found\") from exc\n</code></pre>"},{"location":"reference/routes/","title":"Routes","text":""},{"location":"reference/routes/#routes.tvtime","title":"<code>routes.tvtime</code>","text":"<p>TvTime Routes</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Redis Connection Error</p> <p>Returns:</p> Name Type Description <code>APIRouter</code> <p>Router for tvtime routes</p>"},{"location":"reference/routes/#routes.tvtime.router","title":"<code>router = APIRouter(prefix='', tags=['tvtime'], responses={200: {'description': 'Success'}, 404: {'description': 'Not found/Redis Connection Error'}})</code>  <code>module-attribute</code>","text":""},{"location":"reference/routes/#routes.tvtime.follow_show","title":"<code>follow_show(user, show)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.put(\"/show\", summary=\"Follow a show\")\ndef follow_show(user: TVTimeUser, show: Show):\n    response = {\"message\": \"Not Impemented\"}\n    return JSONResponse(content=response, status_code=501)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.get_all_data","title":"<code>get_all_data(username, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.get(\"/all-data\", summary=\"Get All Data\")\ndef get_all_data(\n    username: str, tvtime_data_service: Annotated[TVTimeDataService, Depends()]\n):\n    try:\n        data = tvtime_data_service.get_all_data(username)\n    except RedisConnectionError as exc:\n        logger.error(exc)\n        raise HTTPException(status_code=404, detail=\"Redis Connection Error\") from exc\n    return JSONResponse(content=data.dict(), status_code=200)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.get_not_started_yet","title":"<code>get_not_started_yet(username, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.get(\"/not-started-yet\", summary=\"Get Not Started Yet List\")\ndef get_not_started_yet(\n    username: str, tvtime_data_service: Annotated[TVTimeDataService, Depends()]\n):\n    try:\n        response = tvtime_data_service.get_not_started_yet(username)\n    except RedisConnectionError as exc:\n        logger.error(exc)\n        raise HTTPException(status_code=404, detail=\"Redis Connection Error\") from exc\n    return JSONResponse(content=response, status_code=200)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.get_not_watched_for_while","title":"<code>get_not_watched_for_while(username, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.get(\"/not-watched-for-while\", summary=\"Get Not Watched For While List\")\ndef get_not_watched_for_while(\n    username: str, tvtime_data_service: Annotated[TVTimeDataService, Depends()]\n):\n    try:\n        response = tvtime_data_service.get_not_watched_for_while(username)\n    except RedisConnectionError as exc:\n        logger.error(exc)\n        raise HTTPException(status_code=404, detail=\"Redis Connection Error\") from exc\n    return JSONResponse(content=response, status_code=200)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.get_show","title":"<code>get_show(username, show, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.get(\"/show\", summary=\"Get Show\")\ndef get_show(\n    username: str,\n    show: Show,\n    tvtime_data_service: Annotated[TVTimeDataService, Depends()],\n):\n    response = {\"message\": \"Not Impemented\"}\n    return JSONResponse(content=response, status_code=501)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.get_status","title":"<code>get_status(current_user, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.get(\"/status\", summary=\"Get Data Status\")\ndef get_status(\n    current_user: Annotated[UserOut, Depends(get_current_active_user)],\n    tvtime_data_service: Annotated[TVTimeDataService, Depends()],\n) -&gt; JSONResponse:\n    try:\n        response = tvtime_data_service.get_status(current_user.username)\n    except RedisConnectionError as exc:\n        logger.error(exc)\n        raise HTTPException(status_code=404, detail=\"Redis Connection Error\") from exc\n    return JSONResponse(content=response, status_code=200)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.get_watch_next","title":"<code>get_watch_next(username, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.get(\"/watch-next\", summary=\"Get Watch Next List\")\ndef get_watch_next(\n    username: str, tvtime_data_service: Annotated[TVTimeDataService, Depends()]\n):\n    try:\n        response = tvtime_data_service.get_watch_next(username)\n    except RedisConnectionError as exc:\n        logger.error(exc)\n        raise HTTPException(status_code=404, detail=\"Redis Connection Error\") from exc\n    return JSONResponse(content=response, status_code=200)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.mark_episode_unwatched","title":"<code>mark_episode_unwatched(user, episode, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.delete(\"/episode\", summary=\"Mark Episode UnWatched\")\ndef mark_episode_unwatched(\n    user: TVTimeUser,\n    episode: Episode,\n    tvtime_data_service: Annotated[TVTimeDataService, Depends()],\n):\n    response = {\"message\": \"Not Impemented\"}\n    return JSONResponse(content=response, status_code=501)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.mark_episode_watched","title":"<code>mark_episode_watched(user, episode, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.put(\"/episode\", summary=\"Mark Episode Watched\")\ndef mark_episode_watched(\n    user: TVTimeUser,\n    episode: Episode,\n    tvtime_data_service: Annotated[TVTimeDataService, Depends()],\n):\n    response = {\"message\": \"Not Impemented\"}\n    return JSONResponse(content=response, status_code=501)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.mark_season_unwatched","title":"<code>mark_season_unwatched(user, season, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.delete(\"/season\", summary=\"Mark Season UnWatched\")\ndef mark_season_unwatched(\n    user: TVTimeUser,\n    season: Season,\n    tvtime_data_service: Annotated[TVTimeDataService, Depends()],\n):\n    response = {\"message\": \"Not Impemented\"}\n    return JSONResponse(content=response, status_code=501)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.mark_season_watched","title":"<code>mark_season_watched(user, season, tvtime_data_service)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.put(\"/season\", summary=\"Mark Season Watched\")\ndef mark_season_watched(\n    user: TVTimeUser,\n    season: Season,\n    tvtime_data_service: Annotated[TVTimeDataService, Depends()],\n):\n    response = {\"message\": \"Not Impemented\"}\n    return JSONResponse(content=response, status_code=501)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.mark_show_watched_until","title":"<code>mark_show_watched_until(user, show)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.put(\"/show/until\", summary=\"Mark show as watched until a date\")\ndef mark_show_watched_until(user: TVTimeUser, show: Show):\n    response = {\"message\": \"Not Impemented\"}\n    return JSONResponse(content=response, status_code=501)\n</code></pre>"},{"location":"reference/routes/#routes.tvtime.unfollow_show","title":"<code>unfollow_show(user, show)</code>","text":"Source code in <code>src/routes/tvtime.py</code> <pre><code>@router.delete(\"/show\", summary=\"Unfollow a show\")\ndef unfollow_show(user: TVTimeUser, show: Show):\n    response = {\"message\": \"Not Impemented\"}\n    return JSONResponse(content=response, status_code=501)\n</code></pre>"},{"location":"reference/services/","title":"Service","text":""},{"location":"reference/services/#service.tvtime_data","title":"<code>service.tvtime_data</code>","text":"<p>TVTime Data Service</p> <p>Returns:</p> Name Type Description <code>TVTimeDataService</code> <p>Service to handle tvtime data</p>"},{"location":"reference/services/#service.tvtime_data.TVTimeDataService","title":"<code>TVTimeDataService</code>","text":"Source code in <code>src/service/tvtime_data.py</code> <pre><code>class TVTimeDataService:\n    def __init__(self, redis_client: Annotated[RedisOMClient, Depends()]):\n        self.redis = redis_client\n\n    def get_status(self, username):\n        status = {\n            \"exists\": self.redis.exists(username),\n            \"ttl\": self.redis.get_ttl(username),\n        }\n        return status\n\n    def get_all_data(self, username):\n        return self.redis.get_tvtime_data(username)\n\n    def get_watch_next(self, username):\n        return self.redis.get_tvtime_watch_next(username)\n\n    def get_not_watched_for_while(self, username):\n        return self.redis.get_tvtime_not_watched_for_while(username)\n\n    def get_not_started_yet(self, username):\n        return self.redis.get_tvtime_not_started_yet(username)\n</code></pre>"},{"location":"reference/services/#service.tvtime_data.TVTimeDataService.redis","title":"<code>redis = redis_client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/services/#service.tvtime_data.TVTimeDataService.__init__","title":"<code>__init__(redis_client)</code>","text":"Source code in <code>src/service/tvtime_data.py</code> <pre><code>def __init__(self, redis_client: Annotated[RedisOMClient, Depends()]):\n    self.redis = redis_client\n</code></pre>"},{"location":"reference/services/#service.tvtime_data.TVTimeDataService.get_all_data","title":"<code>get_all_data(username)</code>","text":"Source code in <code>src/service/tvtime_data.py</code> <pre><code>def get_all_data(self, username):\n    return self.redis.get_tvtime_data(username)\n</code></pre>"},{"location":"reference/services/#service.tvtime_data.TVTimeDataService.get_not_started_yet","title":"<code>get_not_started_yet(username)</code>","text":"Source code in <code>src/service/tvtime_data.py</code> <pre><code>def get_not_started_yet(self, username):\n    return self.redis.get_tvtime_not_started_yet(username)\n</code></pre>"},{"location":"reference/services/#service.tvtime_data.TVTimeDataService.get_not_watched_for_while","title":"<code>get_not_watched_for_while(username)</code>","text":"Source code in <code>src/service/tvtime_data.py</code> <pre><code>def get_not_watched_for_while(self, username):\n    return self.redis.get_tvtime_not_watched_for_while(username)\n</code></pre>"},{"location":"reference/services/#service.tvtime_data.TVTimeDataService.get_status","title":"<code>get_status(username)</code>","text":"Source code in <code>src/service/tvtime_data.py</code> <pre><code>def get_status(self, username):\n    status = {\n        \"exists\": self.redis.exists(username),\n        \"ttl\": self.redis.get_ttl(username),\n    }\n    return status\n</code></pre>"},{"location":"reference/services/#service.tvtime_data.TVTimeDataService.get_watch_next","title":"<code>get_watch_next(username)</code>","text":"Source code in <code>src/service/tvtime_data.py</code> <pre><code>def get_watch_next(self, username):\n    return self.redis.get_tvtime_watch_next(username)\n</code></pre>"},{"location":"reference/services/#service.tvtime_scraper","title":"<code>service.tvtime_scraper</code>","text":"<p>TVTime Scraper Service</p> <p>Returns:</p> Name Type Description <code>TVTimeScraperService</code> <p>Service to handle scraper tasks</p>"},{"location":"reference/services/#service.tvtime_scraper.TVTimeScraperService","title":"<code>TVTimeScraperService</code>","text":"Source code in <code>src/service/tvtime_scraper.py</code> <pre><code>class TVTimeScraperService:\n    def __init__(self, redis_client: Annotated[RedisOMClient, Depends()]):\n        self.celery = celery\n        self.redis = redis_client\n\n    def scrape(self, user: TVTimeUser) -&gt; str:\n        logger.debug(\"Scraping Service Started\")\n        task = scrape_task.delay(user)\n        return task.id\n\n    def get_status(self, task_id):\n        logger.debug(\"Task id {task_id}\", task_id=task_id)\n        result = AsyncResult(id=task_id, app=self.celery)\n        # https://docs.celeryq.dev/en/latest/userguide/tasks.html#built-in-states\n        return {\"id\": result.id, \"status\": result.status}\n</code></pre>"},{"location":"reference/services/#service.tvtime_scraper.TVTimeScraperService.celery","title":"<code>celery = celery</code>  <code>instance-attribute</code>","text":""},{"location":"reference/services/#service.tvtime_scraper.TVTimeScraperService.redis","title":"<code>redis = redis_client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/services/#service.tvtime_scraper.TVTimeScraperService.__init__","title":"<code>__init__(redis_client)</code>","text":"Source code in <code>src/service/tvtime_scraper.py</code> <pre><code>def __init__(self, redis_client: Annotated[RedisOMClient, Depends()]):\n    self.celery = celery\n    self.redis = redis_client\n</code></pre>"},{"location":"reference/services/#service.tvtime_scraper.TVTimeScraperService.get_status","title":"<code>get_status(task_id)</code>","text":"Source code in <code>src/service/tvtime_scraper.py</code> <pre><code>def get_status(self, task_id):\n    logger.debug(\"Task id {task_id}\", task_id=task_id)\n    result = AsyncResult(id=task_id, app=self.celery)\n    # https://docs.celeryq.dev/en/latest/userguide/tasks.html#built-in-states\n    return {\"id\": result.id, \"status\": result.status}\n</code></pre>"},{"location":"reference/services/#service.tvtime_scraper.TVTimeScraperService.scrape","title":"<code>scrape(user)</code>","text":"Source code in <code>src/service/tvtime_scraper.py</code> <pre><code>def scrape(self, user: TVTimeUser) -&gt; str:\n    logger.debug(\"Scraping Service Started\")\n    task = scrape_task.delay(user)\n    return task.id\n</code></pre>"},{"location":"reference/spider/","title":"Spider","text":""},{"location":"reference/spider/#core.spider","title":"<code>core.spider</code>","text":""},{"location":"reference/spider/#core.spider.input_args","title":"<code>input_args = {'user': user}</code>  <code>module-attribute</code>","text":""},{"location":"reference/spider/#core.spider.process","title":"<code>process = CrawlerProcess(settings={'ITEM_PIPELINES': {'src.repository.spider.RedisWriterPipeline': 1}})</code>  <code>module-attribute</code>","text":""},{"location":"reference/spider/#core.spider.user","title":"<code>user = TVTimeUser(username='string', password='string')</code>  <code>module-attribute</code>","text":""},{"location":"reference/spider/#core.spider.JsonWriterPipeline","title":"<code>JsonWriterPipeline</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>class JsonWriterPipeline:\n    def open_spider(self, spider):\n        self.file = open(\"items.json\", \"w\")\n\n    def close_spider(self, spider):\n        self.file.close()\n\n    def process_item(self, item, spider):\n        line = json.dumps(dict(item)) + \"\\n\"\n        self.file.write(line)\n        return item\n</code></pre>"},{"location":"reference/spider/#core.spider.JsonWriterPipeline.close_spider","title":"<code>close_spider(spider)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def close_spider(self, spider):\n    self.file.close()\n</code></pre>"},{"location":"reference/spider/#core.spider.JsonWriterPipeline.open_spider","title":"<code>open_spider(spider)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def open_spider(self, spider):\n    self.file = open(\"items.json\", \"w\")\n</code></pre>"},{"location":"reference/spider/#core.spider.JsonWriterPipeline.process_item","title":"<code>process_item(item, spider)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def process_item(self, item, spider):\n    line = json.dumps(dict(item)) + \"\\n\"\n    self.file.write(line)\n    return item\n</code></pre>"},{"location":"reference/spider/#core.spider.RedisWriterPipeline","title":"<code>RedisWriterPipeline</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>class RedisWriterPipeline:\n    def __init__(self, user) -&gt; None:\n        self.redis = get_redis_connection(url=REDIS_URL)\n        self.username = user.username\n        TVTimeDataModel.Meta.database = get_redis_connection(url=REDIS_URL)\n\n    @classmethod\n    def from_crawler(cls, crawler):\n        return cls(crawler.spider.user)\n\n    def open_spider(self, spider):\n        logger.debug(f\"Opening spider {spider.name}\")\n        self.data = TVTimeDataModel(username=self.username)\n        self.data.save()\n        self.data.expire(86400)\n\n    def process_item(self, item, spider):\n        logger.debug(f\"Processing item {item}\")\n        name = item.get(\"name\")\n        if name == \"id\":\n            self.data.user_id = item.get(\"data\").get(\"user_id\")\n        elif name == \"to-watch\":\n            self.data.watch_next = item.get(\"data\")\n        elif name == \"upcoming\":\n            self.data.upcoming = item.get(\"data\")\n        elif name == \"profile\":\n            self.data.profile = item.get(\"data\")\n        self.data.save()\n\n    def close_spider(self, spider):\n        logger.debug(f\"Closing spider {spider.name}\")\n        if spider.USER_NOTFOUND_FLAG:\n            self.data.expire(0)\n        self.redis.close()\n</code></pre>"},{"location":"reference/spider/#core.spider.RedisWriterPipeline.redis","title":"<code>redis = get_redis_connection(url=REDIS_URL)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/spider/#core.spider.RedisWriterPipeline.username","title":"<code>username = user.username</code>  <code>instance-attribute</code>","text":""},{"location":"reference/spider/#core.spider.RedisWriterPipeline.__init__","title":"<code>__init__(user)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def __init__(self, user) -&gt; None:\n    self.redis = get_redis_connection(url=REDIS_URL)\n    self.username = user.username\n    TVTimeDataModel.Meta.database = get_redis_connection(url=REDIS_URL)\n</code></pre>"},{"location":"reference/spider/#core.spider.RedisWriterPipeline.close_spider","title":"<code>close_spider(spider)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def close_spider(self, spider):\n    logger.debug(f\"Closing spider {spider.name}\")\n    if spider.USER_NOTFOUND_FLAG:\n        self.data.expire(0)\n    self.redis.close()\n</code></pre>"},{"location":"reference/spider/#core.spider.RedisWriterPipeline.from_crawler","title":"<code>from_crawler(crawler)</code>  <code>classmethod</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>@classmethod\ndef from_crawler(cls, crawler):\n    return cls(crawler.spider.user)\n</code></pre>"},{"location":"reference/spider/#core.spider.RedisWriterPipeline.open_spider","title":"<code>open_spider(spider)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def open_spider(self, spider):\n    logger.debug(f\"Opening spider {spider.name}\")\n    self.data = TVTimeDataModel(username=self.username)\n    self.data.save()\n    self.data.expire(86400)\n</code></pre>"},{"location":"reference/spider/#core.spider.RedisWriterPipeline.process_item","title":"<code>process_item(item, spider)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def process_item(self, item, spider):\n    logger.debug(f\"Processing item {item}\")\n    name = item.get(\"name\")\n    if name == \"id\":\n        self.data.user_id = item.get(\"data\").get(\"user_id\")\n    elif name == \"to-watch\":\n        self.data.watch_next = item.get(\"data\")\n    elif name == \"upcoming\":\n        self.data.upcoming = item.get(\"data\")\n    elif name == \"profile\":\n        self.data.profile = item.get(\"data\")\n    self.data.save()\n</code></pre>"},{"location":"reference/spider/#core.spider.TVTimeSpider","title":"<code>TVTimeSpider</code>","text":"<p>         Bases: <code>scrapy.Spider</code></p> Source code in <code>src/core/spider.py</code> <pre><code>class TVTimeSpider(scrapy.Spider):\n    name = \"tvtime\"\n    USER_NOTFOUND_FLAG = False\n\n    def __init__(self, user: TVTimeUser, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.user = user\n        logger.info(f\"User: {user}\")\n\n    def start_requests(self):\n        logger.info(f\"Starting Requests for {self.user.username}\")\n        yield scrapy.FormRequest(\n            url=\"https://www.tvtime.com/signin\",\n            formdata={\n                \"username\": self.user.username,\n                \"password\": self.user.password,\n            },\n            callback=self.logged_in,\n        )\n\n    def logged_in(self, response):\n        logger.debug(f\"Logged in {self.user.username}\")\n        script_content = response.selector.xpath(\n            '/html/head/script[contains(text(), \"tvst.user\")]/text()'\n        ).get()\n        user_id = re.search(r'(?&lt;= id:[ ]\")[0-9]*', script_content).group(0)\n        if user_id == \"\":\n            logger.error(\"User not found\")\n            self.USER_NOTFOUND_FLAG = True\n            raise CloseSpider(\"User not found\")\n        user_id = int(user_id)\n        yield {\"name\": \"id\", \"data\": {\"user_id\": user_id}}\n        yield response.follow(TVTIME_TOWATCH_URL, self.parse_to_watch)\n        yield response.follow(TVTIME_UPCOMING_URL, self.parse_upcoming)\n        yield scrapy.Request(\n            f\"{TVTIME_PROFILE_URL}/{user_id}/profile\", self.parse_profile\n        )\n\n    def parse_to_watch(self, response):\n        result = {\"name\": \"to-watch\", \"data\": {}}\n        items = response.selector.xpath('//*[@id=\"to-watch\"]/ul')\n        titles = response.selector.xpath('//*[@id=\"to-watch\"]/h1')\n        for idx in range(len(items)):\n            title = titles[idx].xpath(\"./text()\").get().strip()\n            result[\"data\"][title] = {}\n            new_tags = items[idx].xpath('.//div[@class=\"new-label\"]/text()').getall()\n            shows = items[idx].xpath(\".//img/@alt\").getall()\n            episodes = (\n                items[idx]\n                .xpath('.//div[@class=\"episode-details poster-details\"]/h2/a/text()')\n                .getall()\n            )\n            for show, episode in zip(shows, episodes):\n                tag = False\n                if len(new_tags) &gt; 0:\n                    tag = True\n                    new_tags.pop(0)\n                temp = {\"episode\": episode, \"is_new\": tag}\n                result[\"data\"][title][show] = temp\n\n        # title_not_watched = items[0].xpath('.//img/@alt').getall()\n        # title_not_started = items[1].xpath('.//img/@alt').getall()\n        # result['data']['not-watched'] = title_not_watched\n        # result['data']['not-started'] = title_not_started\n        # script_content = response.selector.xpath('//div[@class=\"main-block-container\"]/script/text()').get()\n        # data_content = re.search(r'(tvst.data = )(.*)(;)', script_content, re.DOTALL).group(2)\n        # data_content = data_content.replace('\\&amp;quot;', ' ')\n        # data_content = data_content.replace(\"'\", \"\")\n        # data_content = data_content.replace('evt:', '')\n        # data_content = data_content.replace('//', '')\n        # data_content = data_content.replace(\"\\&amp;quot;\", '\"').replace(\"'[\", \"[\").replace(\"]'\", \"]\").replace('toWatchEpisodes', '\"toWatchEpisodes\"').replace('trendingShows', '\"trendingShows\"').replace('evt', '\"evt\"')\n        # data_content = data_content.replace('\\\\\"', '').replace('\\\\', '').replace(\"'\", '\"')\n        # with open('data.json', 'w') as f:\n        #     f.write(data_content)\n        # data = json.loads(data_content)\n        return result\n\n    def parse_upcoming(self, response):\n        result = {\"name\": \"upcoming\", \"data\": {}}\n        items = response.selector.xpath('//*[@id=\"upcoming-episodes\"]/ul/li')\n        for item in items:\n            title = item.xpath(\n                './/div[@class=\"episode-details poster-details\"]/a/text()'\n            ).get()\n            episode = item.xpath(\n                '//*[@id=\"upcoming-episodes\"]/ul/li/div[@class=\"episode-details poster-details\"]/h2/a/text()'\n            ).get()\n            day = item.xpath('.//div[@class=\"overlay\"]//ul/li/div/text()').get()\n            if title:\n                result[\"data\"][title] = {episode: day}\n        return result\n\n    def parse_profile(self, response):\n        result = {\"name\": \"profile\", \"data\": {}}\n        script_content = response.selector.xpath(\n            '//div[@class=\"main-block-container\"]/script/text()'\n        ).get()\n        data_content = re.search(\n            r\"(tvst.data = )(.*)(;)\", script_content, re.DOTALL\n        ).group(2)\n        data_content = (\n            data_content.replace(\"\\&amp;quot;\", '\"')\n            .replace(\"shows\", '\"shows\"', 1)\n            .replace(\"profile\", '\"profile\"', 1)\n            .replace(\"'[\", \"[\")\n            .replace(\"]'\", \"]\")\n            .replace(\"'{\", \"{\")\n            .replace(\"}'\", \"}\")\n            .replace(\"\\&amp;\", \"\")\n        )\n        with open(\"data.json\", \"w\") as f:\n            f.write(data_content)\n        result[\"data\"] = json.loads(data_content)\n        return result\n</code></pre>"},{"location":"reference/spider/#core.spider.TVTimeSpider.USER_NOTFOUND_FLAG","title":"<code>USER_NOTFOUND_FLAG = False</code>  <code>class-attribute</code>","text":""},{"location":"reference/spider/#core.spider.TVTimeSpider.name","title":"<code>name = 'tvtime'</code>  <code>class-attribute</code>","text":""},{"location":"reference/spider/#core.spider.TVTimeSpider.user","title":"<code>user = user</code>  <code>instance-attribute</code>","text":""},{"location":"reference/spider/#core.spider.TVTimeSpider.__init__","title":"<code>__init__(user, *args, **kwargs)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def __init__(self, user: TVTimeUser, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.user = user\n    logger.info(f\"User: {user}\")\n</code></pre>"},{"location":"reference/spider/#core.spider.TVTimeSpider.logged_in","title":"<code>logged_in(response)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def logged_in(self, response):\n    logger.debug(f\"Logged in {self.user.username}\")\n    script_content = response.selector.xpath(\n        '/html/head/script[contains(text(), \"tvst.user\")]/text()'\n    ).get()\n    user_id = re.search(r'(?&lt;= id:[ ]\")[0-9]*', script_content).group(0)\n    if user_id == \"\":\n        logger.error(\"User not found\")\n        self.USER_NOTFOUND_FLAG = True\n        raise CloseSpider(\"User not found\")\n    user_id = int(user_id)\n    yield {\"name\": \"id\", \"data\": {\"user_id\": user_id}}\n    yield response.follow(TVTIME_TOWATCH_URL, self.parse_to_watch)\n    yield response.follow(TVTIME_UPCOMING_URL, self.parse_upcoming)\n    yield scrapy.Request(\n        f\"{TVTIME_PROFILE_URL}/{user_id}/profile\", self.parse_profile\n    )\n</code></pre>"},{"location":"reference/spider/#core.spider.TVTimeSpider.parse_profile","title":"<code>parse_profile(response)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def parse_profile(self, response):\n    result = {\"name\": \"profile\", \"data\": {}}\n    script_content = response.selector.xpath(\n        '//div[@class=\"main-block-container\"]/script/text()'\n    ).get()\n    data_content = re.search(\n        r\"(tvst.data = )(.*)(;)\", script_content, re.DOTALL\n    ).group(2)\n    data_content = (\n        data_content.replace(\"\\&amp;quot;\", '\"')\n        .replace(\"shows\", '\"shows\"', 1)\n        .replace(\"profile\", '\"profile\"', 1)\n        .replace(\"'[\", \"[\")\n        .replace(\"]'\", \"]\")\n        .replace(\"'{\", \"{\")\n        .replace(\"}'\", \"}\")\n        .replace(\"\\&amp;\", \"\")\n    )\n    with open(\"data.json\", \"w\") as f:\n        f.write(data_content)\n    result[\"data\"] = json.loads(data_content)\n    return result\n</code></pre>"},{"location":"reference/spider/#core.spider.TVTimeSpider.parse_to_watch","title":"<code>parse_to_watch(response)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def parse_to_watch(self, response):\n    result = {\"name\": \"to-watch\", \"data\": {}}\n    items = response.selector.xpath('//*[@id=\"to-watch\"]/ul')\n    titles = response.selector.xpath('//*[@id=\"to-watch\"]/h1')\n    for idx in range(len(items)):\n        title = titles[idx].xpath(\"./text()\").get().strip()\n        result[\"data\"][title] = {}\n        new_tags = items[idx].xpath('.//div[@class=\"new-label\"]/text()').getall()\n        shows = items[idx].xpath(\".//img/@alt\").getall()\n        episodes = (\n            items[idx]\n            .xpath('.//div[@class=\"episode-details poster-details\"]/h2/a/text()')\n            .getall()\n        )\n        for show, episode in zip(shows, episodes):\n            tag = False\n            if len(new_tags) &gt; 0:\n                tag = True\n                new_tags.pop(0)\n            temp = {\"episode\": episode, \"is_new\": tag}\n            result[\"data\"][title][show] = temp\n\n    # title_not_watched = items[0].xpath('.//img/@alt').getall()\n    # title_not_started = items[1].xpath('.//img/@alt').getall()\n    # result['data']['not-watched'] = title_not_watched\n    # result['data']['not-started'] = title_not_started\n    # script_content = response.selector.xpath('//div[@class=\"main-block-container\"]/script/text()').get()\n    # data_content = re.search(r'(tvst.data = )(.*)(;)', script_content, re.DOTALL).group(2)\n    # data_content = data_content.replace('\\&amp;quot;', ' ')\n    # data_content = data_content.replace(\"'\", \"\")\n    # data_content = data_content.replace('evt:', '')\n    # data_content = data_content.replace('//', '')\n    # data_content = data_content.replace(\"\\&amp;quot;\", '\"').replace(\"'[\", \"[\").replace(\"]'\", \"]\").replace('toWatchEpisodes', '\"toWatchEpisodes\"').replace('trendingShows', '\"trendingShows\"').replace('evt', '\"evt\"')\n    # data_content = data_content.replace('\\\\\"', '').replace('\\\\', '').replace(\"'\", '\"')\n    # with open('data.json', 'w') as f:\n    #     f.write(data_content)\n    # data = json.loads(data_content)\n    return result\n</code></pre>"},{"location":"reference/spider/#core.spider.TVTimeSpider.parse_upcoming","title":"<code>parse_upcoming(response)</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def parse_upcoming(self, response):\n    result = {\"name\": \"upcoming\", \"data\": {}}\n    items = response.selector.xpath('//*[@id=\"upcoming-episodes\"]/ul/li')\n    for item in items:\n        title = item.xpath(\n            './/div[@class=\"episode-details poster-details\"]/a/text()'\n        ).get()\n        episode = item.xpath(\n            '//*[@id=\"upcoming-episodes\"]/ul/li/div[@class=\"episode-details poster-details\"]/h2/a/text()'\n        ).get()\n        day = item.xpath('.//div[@class=\"overlay\"]//ul/li/div/text()').get()\n        if title:\n            result[\"data\"][title] = {episode: day}\n    return result\n</code></pre>"},{"location":"reference/spider/#core.spider.TVTimeSpider.start_requests","title":"<code>start_requests()</code>","text":"Source code in <code>src/core/spider.py</code> <pre><code>def start_requests(self):\n    logger.info(f\"Starting Requests for {self.user.username}\")\n    yield scrapy.FormRequest(\n        url=\"https://www.tvtime.com/signin\",\n        formdata={\n            \"username\": self.user.username,\n            \"password\": self.user.password,\n        },\n        callback=self.logged_in,\n    )\n</code></pre>"}]}